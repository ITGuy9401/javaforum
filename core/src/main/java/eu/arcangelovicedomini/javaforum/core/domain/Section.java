// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package eu.arcangelovicedomini.javaforum.core.domain;

/**
 * 
 */
public abstract class Section
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -1832735461772371565L;

    private java.lang.Long sectionId;

    /**
     * 
     */
    public java.lang.Long getSectionId()
    {
        return this.sectionId;
    }

    public void setSectionId(java.lang.Long sectionId)
    {
        this.sectionId = sectionId;
    }

    private java.lang.String title;

    /**
     * <p>
     * Title of the section
     * </p>
     */
    public java.lang.String getTitle()
    {
        return this.title;
    }

    public void setTitle(java.lang.String title)
    {
        this.title = title;
    }

    private java.lang.String description;

    /**
     * <p>
     * Description of the section.
     * </p>
     */
    public java.lang.String getDescription()
    {
        return this.description;
    }

    public void setDescription(java.lang.String description)
    {
        this.description = description;
    }

    private eu.arcangelovicedomini.javaforum.core.domain.Area area;

    /**
     * 
     */
    public eu.arcangelovicedomini.javaforum.core.domain.Area getArea()
    {
        return this.area;
    }

    public void setArea(eu.arcangelovicedomini.javaforum.core.domain.Area area)
    {
        this.area = area;
    }

    private java.util.Set<eu.arcangelovicedomini.javaforum.core.domain.Thread> threads = new java.util.HashSet<eu.arcangelovicedomini.javaforum.core.domain.Thread>();

    /**
     * 
     */
    public java.util.Set<eu.arcangelovicedomini.javaforum.core.domain.Thread> getThreads()
    {
        return this.threads;
    }

    public void setThreads(java.util.Set<eu.arcangelovicedomini.javaforum.core.domain.Thread> threads)
    {
        this.threads = threads;
    }

    private java.util.Set<eu.arcangelovicedomini.javaforum.core.domain.Section> childSections = new java.util.HashSet<eu.arcangelovicedomini.javaforum.core.domain.Section>();

    /**
     * 
     */
    public java.util.Set<eu.arcangelovicedomini.javaforum.core.domain.Section> getChildSections()
    {
        return this.childSections;
    }

    public void setChildSections(java.util.Set<eu.arcangelovicedomini.javaforum.core.domain.Section> childSections)
    {
        this.childSections = childSections;
    }

    private eu.arcangelovicedomini.javaforum.core.domain.Section fatherSection;

    /**
     * 
     */
    public eu.arcangelovicedomini.javaforum.core.domain.Section getFatherSection()
    {
        return this.fatherSection;
    }

    public void setFatherSection(eu.arcangelovicedomini.javaforum.core.domain.Section fatherSection)
    {
        this.fatherSection = fatherSection;
    }

    /**
     * Returns <code>true</code> if the argument is an Section instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Section))
        {
            return false;
        }
        final Section that = (Section)object;
        if (this.sectionId == null || that.getSectionId() == null || !this.sectionId.equals(that.getSectionId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (sectionId == null ? 0 : sectionId.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link eu.arcangelovicedomini.javaforum.core.domain.Section}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link eu.arcangelovicedomini.javaforum.core.domain.Section}.
         */
        public static eu.arcangelovicedomini.javaforum.core.domain.Section newInstance()
        {
            return new eu.arcangelovicedomini.javaforum.core.domain.SectionImpl();
        }

        /**
         * Constructs a new instance of {@link eu.arcangelovicedomini.javaforum.core.domain.Section}, taking all required and/or
         * read-only properties as arguments.
         */
        public static eu.arcangelovicedomini.javaforum.core.domain.Section newInstance(java.lang.String title, java.lang.String description)
        {
            final eu.arcangelovicedomini.javaforum.core.domain.Section entity = new eu.arcangelovicedomini.javaforum.core.domain.SectionImpl();
            entity.setTitle(title);
            entity.setDescription(description);
            return entity;
        }

        /**
         * Constructs a new instance of {@link eu.arcangelovicedomini.javaforum.core.domain.Section}, taking all possible properties
         * (except the identifier(s))as arguments.
         */
        public static eu.arcangelovicedomini.javaforum.core.domain.Section newInstance(java.lang.String title, java.lang.String description, eu.arcangelovicedomini.javaforum.core.domain.Area area, java.util.Set<eu.arcangelovicedomini.javaforum.core.domain.Thread> threads, java.util.Set<eu.arcangelovicedomini.javaforum.core.domain.Section> childSections, eu.arcangelovicedomini.javaforum.core.domain.Section fatherSection)
        {
            final eu.arcangelovicedomini.javaforum.core.domain.Section entity = new eu.arcangelovicedomini.javaforum.core.domain.SectionImpl();
            entity.setTitle(title);
            entity.setDescription(description);
            entity.setArea(area);
            entity.setThreads(threads);
            entity.setChildSections(childSections);
            entity.setFatherSection(fatherSection);
            return entity;
        }
    }
    
// HibernateEntity.vsl merge-point
}